{
  "_args": [
    [
      {
        "raw": "node-pogo-signature@git+https://github.com/starkevin/node-pogo-signature.git",
        "scope": null,
        "escapedName": "node-pogo-signature",
        "name": "node-pogo-signature",
        "rawSpec": "git+https://github.com/starkevin/node-pogo-signature.git",
        "spec": "git+https://github.com/starkevin/node-pogo-signature.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:starkevin/node-pogo-signature.git",
          "sshUrl": "git+ssh://git@github.com/starkevin/node-pogo-signature.git",
          "httpsUrl": "git+https://github.com/starkevin/node-pogo-signature.git",
          "gitUrl": "git://github.com/starkevin/node-pogo-signature.git",
          "shortcut": "github:starkevin/node-pogo-signature",
          "directUrl": "https://raw.githubusercontent.com/starkevin/node-pogo-signature/master/package.json"
        }
      },
      "c:\\Users\\MAdams\\workspace\\TestWebApp\\node_modules\\pogobuf"
    ]
  ],
  "_from": "git+https://github.com/starkevin/node-pogo-signature.git",
  "_id": "node-pogo-signature@3.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/node-pogo-signature",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-pogo-signature@git+https://github.com/starkevin/node-pogo-signature.git",
    "scope": null,
    "escapedName": "node-pogo-signature",
    "name": "node-pogo-signature",
    "rawSpec": "git+https://github.com/starkevin/node-pogo-signature.git",
    "spec": "git+https://github.com/starkevin/node-pogo-signature.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:starkevin/node-pogo-signature.git",
      "sshUrl": "git+ssh://git@github.com/starkevin/node-pogo-signature.git",
      "httpsUrl": "git+https://github.com/starkevin/node-pogo-signature.git",
      "gitUrl": "git://github.com/starkevin/node-pogo-signature.git",
      "shortcut": "github:starkevin/node-pogo-signature",
      "directUrl": "https://raw.githubusercontent.com/starkevin/node-pogo-signature/master/package.json"
    }
  },
  "_requiredBy": [
    "/pogobuf"
  ],
  "_resolved": "git+https://github.com/starkevin/node-pogo-signature.git#b0dc68d3524c80ebadecef5ad8945cec88103271",
  "_shasum": "c275c83e554ccc3b5ee41c7b6ef29f7b0336b3a6",
  "_shrinkwrap": null,
  "_spec": "node-pogo-signature@git+https://github.com/starkevin/node-pogo-signature.git",
  "_where": "c:\\Users\\MAdams\\workspace\\TestWebApp\\node_modules\\pogobuf",
  "author": {
    "name": "Kevin McGowan",
    "email": "mcgowan.kevin@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/starkevin/node-pogo-signature/issues"
  },
  "dependencies": {
    "long": "^3.2.0",
    "pcrypt": "github:laverdet/pcrypt",
    "protobufjs": "^5.0.1"
  },
  "description": "an 'unknown6' signature builder for pokemon go node apis - fully native js!",
  "devDependencies": {},
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "b0dc68d3524c80ebadecef5ad8945cec88103271",
  "homepage": "https://github.com/starkevin/node-pogo-signature",
  "keywords": [
    "pokemongo",
    "unknown6",
    "niantic",
    "pokemon",
    "pogo"
  ],
  "main": "index.js",
  "name": "node-pogo-signature",
  "optionalDependencies": {},
  "readme": "## node-pogo-signature\r\nsignature (aka \"unknown6\") protobuf builder + encryption for node\r\n\r\ncurrently implemented + working in:\r\n* https://github.com/cyraxx/pogobuf ( :sparkles: `npm install pogobuf` )\r\n* https://github.com/Armax/Pokemon-GO-node-api ( `npm install pokemon-go-node-api` )\r\n\r\n## use either a hashing server, or native\r\n```javascript\r\n/// Use hashing\r\nutils.useHashingServer(\"your ip\", 1500);\r\nbuilder.useHashingServer(\"your ip\", 1500);\r\n/// Do not call this to use native\r\n```\r\n\r\n## encrypt usage\r\n```javascript\r\nmodule.encrypt(<Buffer> input, <Number> timestamp_since_start, <function> callback)\r\n// or\r\nmodule.encryptSync(<Buffer> input, <Number> timestamp_since_start)\r\n```\r\n\r\n## one-step encrypt usage\r\nIf you just want to get stuck in and not worry about setting up your signature, you can use the builder to create everything for you\r\n```javascript\r\nconst builder = new Builder();\r\nbuilder.setAuthTicket(/* YOUR AUTH TICKET */, true /* true if you've already done encoding */);\r\nbuilder.setLocation(0,0,0); /* Your location */\r\nbuilder.encrypt([/* Array of requests */], (err, encryptedSig) => {\r\n    console.log(\"Builder response \" + encryptedSig.toString(\"hex\"));\r\n\t/// You can now create the final part of your protobuf\r\n\tf_req.unknown6 = new RequestEnvelop.Unknown6({\r\n\t\tunknown1: 6,\r\n\t\tunknown2: new RequestEnvelop.Unknown6.Unknown2({\r\n\t\t\tunknown1: encryptedSig\r\n\t\t})\r\n\t});\r\n});\r\n\r\n/* Working example with assertion */\r\nconst test = new Buffer(24);\r\nfor(let i = 0; i < 24; i++) {\r\n    test[i] = 0;\r\n};\r\n\r\nconst bytes = new Buffer(32);\r\nfor(let i = 0; i < bytes.length; i++) {\r\n    bytes[i] = i;\r\n};\r\n\r\nconst builder = new index.Builder({unk22: bytes, time_since_start: 500, time: 1478434897578 });\r\nbuilder.setAuthTicket(test, true);\r\nbuilder.setLocation(0,0,0);\r\nbuilder.encrypt([test], (err, encryptedSig) => {\r\n    console.log(\"Builder response \" + encryptedSig.toString(\"hex\"));\r\n    assert(encryptedSig.toString(\"hex\") === \"000001f4f709274ec09e849273e90957837ee4d0a06dbb6af9aae307535e94af95dfee5153b3664b8339334564e4fd6fcf7acbb599ddcaa29babaa8de7627161014507750ca57b897d07de8b780e555304cce4fa61e54d6ca3a6ef39317af0c611013cdc10f93ed1aeabbaad39682cf57b9c0146ba29424c11bc26cce0778bcdef50aa3e44599b2c20987d23b405e12d04e4b553026d1b3fd9e39d99c86716af880c6db557c1e85ed9db13fe71522da7f3bc2b9d8b0a0a39654e90d667de464a4fd07bca9aca910ac7b88e946d05db38d6276161dbbd8d6358fc9401cf2de012208a0ff6fa7d59f2095538cde6903576163d5ff57d95f441811bebd84cf0daa45d4402319a\");\r\n});\r\n```\r\n\r\n##### Info:\r\n\r\nsimply passes `input` and `timestamp_since_start` through the encrypt method found in the native module.\r\nreturns (or via callback for async method) the raw encrypted bytes.\r\n\r\n##### Arguments:\r\n* **`input`** _(Buffer)_: a protobuf-encoded signature message to encrypt\r\n* **`timestamp_since_start`** _(Number)_: The timestamp since your first request\r\n* **`cb(err, encryptedSignature)`** _(Func)_: a callback function to execute when encryption by the module has been completed. success when `err` is null. `encryptedSignature` is a buffer containing the encrypted information.\r\n\r\n### basic example\r\nthe following will read an input buffer read directly from a file, in the real world this will most likely come from an encoded protobuf structure you generated with your api requests.\r\n```javascript\r\nvar crypto = require('crypto');\r\nvar pogoSignature = require('node-pogo-signature');\r\n\r\nvar dump = fs.readFileSync('./signatureBinary.bin');\r\nvar time_since = 500;\r\n\r\nvar encryptedSignature = pogoSignature.encryptSync(dump, time_since);\r\nconsole.log('sync output length: ', encryptedsignature.length);\r\n\r\n// or, async w/ a callback\r\n\r\npogoSignature.encrypt(dump, time_since, function(err, result) {\r\n\tif (err) return console.error(err);\r\n\r\n\tconsole.log('output length: ', result.length)\r\n});\r\n```\r\n\r\n## notes\r\n\r\n* contribute whatever you can\r\n* credit for original `encrypt.c` goes to friends @ [/r/pkmngodev](https://github.com/pkmngodev/Unknown6) (repo is gone)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/starkevin/node-pogo-signature.git"
  },
  "version": "3.0.0"
}
